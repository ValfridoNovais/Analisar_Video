import os
from dotenv import load_dotenv
import streamlit as st
from openai import OpenAI
from moviepy.editor import VideoFileClip
from datetime import datetime

# === CONFIGURA√á√ÉO DE AMBIENTE ===
# Carrega vari√°veis do arquivo .env (ex: OPENAI_API_KEY)
load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Diret√≥rio base do projeto
BASE_DIR = r"C:\Repositorios_GitHube\MeusProjetos\Analisar_Video"

# Estrutura de pastas
PASTAS = {
    "videos": os.path.join(BASE_DIR, "videos"),
    "audios": os.path.join(BASE_DIR, "audios"),
    "trancricoes": os.path.join(BASE_DIR, "trancricoes"),
    "resposta": os.path.join(BASE_DIR, "resposta")
}

# === FUN√á√ÉO 1: Extra√ß√£o de √°udio do v√≠deo ===
def extrair_audio(video_path, audio_path):
    """
    Extrai o √°udio de um v√≠deo (.mp4, .mov...) e salva como .wav
    """
    video = VideoFileClip(video_path)
    video.audio.write_audiofile(audio_path)
    return audio_path

# === FUN√á√ÉO 2: Transcri√ß√£o com Whisper-1 (OpenAI API) ===
def transcrever_whisper(audio_path):
    """
    Usa o modelo 'whisper-1' da OpenAI para transcrever o √°udio extra√≠do.
    """
    with open(audio_path, "rb") as f:
        resposta = client.audio.transcriptions.create(
            model="whisper-1",
            file=f
        )
    return resposta.text

# === FUN√á√ÉO 3: Envia a transcri√ß√£o e inputs para an√°lise por IA ===
def analisar_trabalho(transcricao, fardamento, leitura):
    """
    Gera avalia√ß√£o textual e pontua√ß√£o com base na transcri√ß√£o, observa√ß√µes e barema CEFS.
    """
    prompt = f"""
Voc√™ √© um avaliador do Curso Especial de Forma√ß√£o de Sargentos (CEFS).
Abaixo est√° a transcri√ß√£o de um v√≠deo de apresenta√ß√£o de um aluno sobre indicadores da GDO.

Crit√©rios de avalia√ß√£o (m√°x. 2,0 pontos):
- Introdu√ß√£o e indica√ß√£o do tema: 0 a 0,3
- Explica√ß√£o da metodologia do indicador: 0 a 0,5
- Dom√≠nio do conte√∫do (evitar leitura): 0 a 0,3
- Pertin√™ncia do conte√∫do: 0 a 0,3
- Conclus√£o e import√¢ncia profissional: 0 a 0,3
- Requisitos formais (tempo, uniforme, presen√ßa): 0 a 0,3

*Observa√ß√£o do avaliador sobre o v√≠deo:*
- Fardamento: {fardamento}
- Grau de leitura (0 a 5): {leitura} (0 = n√£o leu, 5 = s√≥ leu o texto)

Transcri√ß√£o do v√≠deo:
\"\"\"{transcricao}\"\"\"

Com base nos crit√©rios e observa√ß√µes acima, forne√ßa:
1. Nota final (m√°x. 2,0)
2. Pontua√ß√£o por crit√©rio
3. Pontos fortes e sugest√µes de melhoria
"""
    resposta = client.chat.completions.create(
        model="gpt-4o-mini",  # vers√£o mais barata e eficiente
        messages=[{"role": "user", "content": prompt}],
        temperature=0.2
    )
    return resposta.choices[0].message.content

# === FUN√á√ÉO 4: Salvar resposta em TXT e Markdown ===
def salvar_resposta(texto, nome_base):
    """
    Salva a an√°lise gerada em .txt e .md na pasta de respostas.
    """
    txt_path = os.path.join(PASTAS["resposta"], f"{nome_base}.txt")
    md_path = os.path.join(PASTAS["resposta"], f"{nome_base}.md")
    with open(txt_path, "w", encoding="utf-8") as f:
        f.write(texto)
    with open(md_path, "w", encoding="utf-8") as f:
        f.write(texto)

# === INTERFACE STREAMLIT ===
st.set_page_config(page_title="Avaliador CEFS", layout="centered")
st.title("üìä Avaliador de V√≠deo - CEFS")

# Lista os v√≠deos dispon√≠veis para an√°lise
videos = [f for f in os.listdir(PASTAS["videos"]) if f.endswith((".mp4", ".mov", ".mkv"))]
video_escolhido = st.selectbox("üé• Selecione o v√≠deo para an√°lise:", videos)

if video_escolhido:
    # Caminhos e nomes baseados em timestamp
    video_path = os.path.join(PASTAS["videos"], video_escolhido)
    nome_base = os.path.splitext(video_escolhido)[0] + "_" + datetime.now().strftime("%Y%m%d%H%M")
    audio_path = os.path.join(PASTAS["audios"], nome_base + ".wav")
    trans_path = os.path.join(PASTAS["trancricoes"], nome_base + ".txt")

    # Inputs manuais: fardamento e grau de leitura
    fardamento = st.selectbox("üëî Fardamento utilizado:", ["Adequado", "Inadequado"])
    leitura = st.slider("üìñ Grau de leitura (0 = n√£o leu, 5 = s√≥ leu):", 0, 5, 2)

    # Bot√£o principal de execu√ß√£o
    if st.button("‚ñ∂Ô∏è Processar v√≠deo"):
        with st.spinner("üéûÔ∏è Extraindo √°udio do v√≠deo..."):
            extrair_audio(video_path, audio_path)

        with st.spinner("üß† Transcrevendo com Whisper..."):
            texto = transcrever_whisper(audio_path)
            with open(trans_path, "w", encoding="utf-8") as f:
                f.write(texto)

        with st.spinner("ü§ñ Gerando an√°lise com GPT..."):
            resultado = analisar_trabalho(texto, fardamento, leitura)
            salvar_resposta(resultado, nome_base)

        # Interface final com downloads e texto
        st.success("‚úÖ Avalia√ß√£o conclu√≠da!")
        st.download_button("üì• Baixar resposta (.txt)", resultado, file_name=nome_base + ".txt")
        st.download_button("üì• Baixar resposta (.md)", resultado, file_name=nome_base + ".md")
        st.text_area("üìã Resultado da An√°lise:", resultado, height=400)
